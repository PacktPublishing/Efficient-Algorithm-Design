# Node class to represent each element in the linked list
class Node:
    def __init__(self, data):
        self.data = data  # Store data
        self.next = None  # Initialize next as null (None in Python)

# LinkedList class to handle operations on the linked list
class LinkedList:
    def __init__(self):
        self.head = None  # Initialize the head of the list as None

    # Method to insert a new node after a given previous node
    def insert_after(self, prev_node, new_data):
        if prev_node is None:
            print("The given previous node must be in the LinkedList.")
            return
        new_node = Node(new_data)  # Create a new node with the provided data
        new_node.next = prev_node.next  # Point the new node to the next node (e.g., 4)
        prev_node.next = new_node  # Point the previous node (e.g., 2) to the new node (e.g., 3)

    # Method to print the linked list
    def print_list(self):
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# Example usage
if __name__ == "__main__":
    llist = LinkedList()

    # Creating the initial linked list 1 -> 2 -> 4
    llist.head = Node(1)
    second = Node(2)
    third = Node(4)

    llist.head.next = second
    second.next = third

    # Insert 3 between 2 and 4
    llist.insert_after(second, 3)

    # Print the updated linked list
    llist.print_list()
